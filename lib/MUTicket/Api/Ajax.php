<?php
/**
 * MUTicket.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUTicket
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.1 (http://modulestudio.de) at Sat Aug 31 12:39:20 CEST 2013.
 */

/**
 * This is the Ajax api helper class.
 */
class MUTicket_Api_Ajax extends MUTicket_Api_Base_Ajax
{
    public function getactiveSupporter()
    {
        $dom = ZLanguage::getModuleDomain('MUTicket');
        // we get a repository for Supporter
        //$modelhelper = new MUTicket_Util_Model();
        $repository = MUTicket_Util_Model::getSupporterRepository();//$modelhelper->getSupporterRepository();

        //$viewHelper = new MUTicket_Util_View();
        $supporterids = MUTicket_Util_View::getSupporterIds();//$viewHelper->getSupporterIds();
        $out = "<span class='muticket_ticket_owner_cancel'></span><form action=''><select id='owner' name='owner'><option value='1'>Set owner</option>";
        if (is_array($supporterids)) {
            foreach ($supporterids as $supporterid) {
                $supporter = $repository->selectById($supporterid);
                $out .= "<option value='" . $supporter['id'] . "'>" . $supporter['username'] . "</option>";
            }
        } else {
            $supporter = $repository->selectById($supporterids);
            $out .= "<option value='" . $supporter['id'] . "'>" . $supporter['username'] . "</option>";
        }

        $textsubmit = __('Submit', $dom);

        $out .= "</select><br /><input type='submit' value='" . $textsubmit . "' /></form>";

        return $out;
    }

    /**
     *
     */
    public function changeCurrentState($args)
    {
        $repository = MUTicket_Util_Model::getTicketRepository();

        $ticket = $args['ticket'];
        $thisticket = $repository->selectById($ticket);

        $sendmail = $args['sendmessage'];
        $state = $args['state'];
        $actualsupporter = $args['actualsupporter'];
        $userid = $thisticket['owner'];

        $serviceManager = ServiceUtil::getManager();
        $entityManager = $serviceManager->getService('doctrine.entitymanager');

        $thisticket->setCurrentState($state);

        $entityManager->flush();

        if ($sendmail == 1) {
            if ($userid > 1) {
                $usermail = UserUtil::getVar('email', $userid);
                MUTicket_Util_Base_Internal::handleChanges('currentState', $usermail, $thisticket);
            }
        }
    }

    /**
     *
     */
    public function changeDueDate($args)
    {
        $repository = MUTicket_Util_Model::getTicketRepository();

        $ticket = $args['ticket'];
        $thisticket = $repository->selectById($ticket);

        $sendmail = $args['sendmessage'];
        $dueDate = $args['dueDate'];
        $dueText = $args['dueText'];
        $actualsupporter = $args['actualsupporter'];
        $userid = $thisticket['createdUserId'];

        $serviceManager = ServiceUtil::getManager();
        $entityManager = $serviceManager->getService('doctrine.entitymanager');

        if ($dueText == '') {
            if ($dueDate != '') {
                $thisticket->setDueDate($dueDate);
            } else {
                $thisticket->setDueDate(NULL);
            }
            $thisticket->setDueText('');
        } else {
            $thisticket->setDueText($dueText);
            $thisticket->setDueDate(NULL);
        }

        $entityManager->flush();

        if ($sendmail == 1) {
            if ($userid > 1) {
                $usermail = UserUtil::getVar('email', $userid);
                MUTicket_Util_Base_Internal::handleChanges('dueDate', $usermail, $thisticket);
            }
        }
    }

    /**
     *
     */
    public function changeLabel($args)
    {
        $serviceManager = ServiceUtil::getManager();
        $entityManager = $serviceManager->getService('doctrine.entitymanager');

        $repository = MUTicket_Util_Model::getTicketRepository();

        $ticket = $args['ticket'];
        $thisticket = $repository->selectById($ticket);
        // we get existing labels for this ticket
        $existinglabels = $thisticket->getLabelticket();
        
        $existinglabelIds = array();

        foreach ($existinglabels as $existinglabel) {
            $existinglabelIds[] = $existinglabel['id'];
        }

        $sendmail = $args['sendmessage'];
        $actualsupporter = $args['actualsupporter'];
        $userid = UserUtil::getIdFromName($args['supporter']);
        if ($userid <= 1 || $userid == false) {
            $userid = UserUtil::getIdFromName($actualsupporter);
        }

        $labels = $args['labels'];

        $labelrepository = MUTicket_Util_Model::getLabelRepository();

        // array for objects of labels
        $labelobjects = array();

        foreach ($labels as $label) {
            if ($label > 0) {
                $thislabel = $labelrepository->selectById($label);
                if (is_array($existinglabelIds)) {

                    if (!in_array($thislabel['id'], $existinglabelIds)) {
                       $labelobjects[] = $thislabel;
                    }
                } else {
                    $labelobjects[] = $thislabel;
                }
            }

            $thisticket->setLabelticket($labelobjects);
            $entityManager->flush();

            if ($existinglabelIds != NULL) {
                foreach ($existinglabelIds as $existinglabelId) {
                    if(!in_array($existinglabelId, $labels)) {
                        $existinglabel = $labelrepository->selectById($existinglabelId);
                        $thisticket->removeLabelticket($existinglabel);
                    }
                }
            }

            $entityManager->flush();
        }

        if ($sendmail == 1) {
            if ($userid > 1) {
                $usermail = UserUtil::getVar('email', $userid);
                MUTicket_Util_Base_Internal::handleChanges('label', $usermail, $thisticket);
            }
        }
    }

    /**
     *
     */
    public function changeSupporter($args)
    {
        $repository = MUTicket_Util_Model::getTicketRepository();

        $ticket = $args['ticket'];
        $thisticket = $repository->selectById($ticket);

        $sendmail = $args['sendmessage'];
        $actualsupporter = $args['actualsupporter'];
        $userid = UserUtil::getIdFromName($args['supporter']);
        if ($userid <= 1 || $userid == false) {
            $userid = UserUtil::getIdFromName($actualsupporter);
        }

        $serviceManager = ServiceUtil::getManager();
        $entityManager = $serviceManager->getService('doctrine.entitymanager');

        $thisticket->setOwner($userid);

        $entityManager->flush();

        if ($sendmail == 1) {
            if ($userid > 1) {
                $usermail = UserUtil::getVar('email', $userid);
                MUTicket_Util_Base_Internal::handleChanges('supporter', $usermail, $thisticket);
            }
        }

    }
}
