<?php
/**
 * MUTicket.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUTicket
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.1 (http://modulestudio.de) at Sat Aug 31 12:39:20 CEST 2013.
 */

/**
 * Installer base class.
 */
class MUTicket_Base_Installer extends Zikula_AbstractInstaller
{
    /**
     * Install the MUTicket application.
     *
     * @return boolean True on success, or false.
     */
    public function install()
    {
        // Check if upload directories exist and if needed create them
        try {
            $controllerHelper = new MUTicket_Util_Controller($this->serviceManager);
            $controllerHelper->checkAndCreateAllUploadFolders();
        } catch (\Exception $e) {
            return LogUtil::registerError($e->getMessage());
        }
        // create all tables from according entity definitions
        try {
            DoctrineHelper::createSchema($this->entityManager, $this->listEntityClasses());
        } catch (\Exception $e) {
            if (System::isDevelopmentMode()) {
                LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
            }
            $returnMessage = $this->__f('An error was encountered while creating the tables for the %s extension.', array($this->name));
            if (!System::isDevelopmentMode()) {
                $returnMessage .= ' ' . $this->__('Please enable the development mode by editing the /config/config.php file in order to reveal the error details.');
            }
            return LogUtil::registerError($returnMessage);
        }
    
        // set up all our vars with initial values
        $this->setVar('supportergroup', '');
        $this->setVar('ratingAllowed', '');
        $this->setVar('fileSize', 0);
        $this->setVar('supporterTickets', false);
        $this->setVar('messageNewOwner', 'Hi supporter, here you get this ticket to work for the customer by yourself.');
        $this->setVar('messageDueDate', 'Dear Customer! We assume that we are able to clear your ticket until the given date');
    
        $categoryRegistryIdsPerEntity = array();
    
        // add default entry for category registry (property named Main)
        include_once 'modules/MUTicket/lib/MUTicket/Api/Base/Category.php';
        include_once 'modules/MUTicket/lib/MUTicket/Api/Category.php';
        $categoryApi = new MUTicket_Api_Category($this->serviceManager);
    
        $registryData = array();
        $registryData['modname'] = $this->name;
        $registryData['table'] = 'Ticket';
        $registryData['property'] = $categoryApi->getPrimaryProperty(array('ot' => 'Ticket'));
        $categoryGlobal = CategoryUtil::getCategoryByPath('/__SYSTEM__/Modules/Global');
        $registryData['category_id'] = $categoryGlobal['id'];
        $registryData['id'] = false;
        if (!DBUtil::insertObject($registryData, 'categories_registry')) {
            LogUtil::registerError($this->__f('Error! Could not create a category registry for the %s entity.', array('ticket')));
        }
        $categoryRegistryIdsPerEntity['ticket'] = $registryData['id'];
    
        // create the default data
        $this->createDefaultData($categoryRegistryIdsPerEntity);
    
        // register persistent event handlers
        $this->registerPersistentEventHandlers();
    
        // register hook subscriber bundles
        HookUtil::registerSubscriberBundles($this->version->getHookSubscriberBundles());
        
    
        // initialisation successful
        return true;
    }
    
    /**
     * Upgrade the MUTicket application from an older version.
     *
     * If the upgrade fails at some point, it returns the last upgraded version.
     *
     * @param integer $oldVersion Version to upgrade from.
     *
     * @return boolean True on success, false otherwise.
     */
    public function upgrade($oldVersion)
    {
    /*
        // Upgrade dependent on old version number
        switch ($oldVersion) {
            case 1.0.0:
                // do something
                // ...
                // update the database schema
                try {
                    DoctrineHelper::updateSchema($this->entityManager, $this->listEntityClasses());
                } catch (\Exception $e) {
                    if (System::isDevelopmentMode()) {
                        LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
                    }
                    return LogUtil::registerError($this->__f('An error was encountered while dropping the tables for the %s extension.', array($this->getName())));
                }
        }
    */
    
        // update successful
        return true;
    }
    
    /**
     * Uninstall MUTicket.
     *
     * @return boolean True on success, false otherwise.
     */
    public function uninstall()
    {
        // delete stored object workflows
        $result = Zikula_Workflow_Util::deleteWorkflowsForModule($this->getName());
        if ($result === false) {
            return LogUtil::registerError($this->__f('An error was encountered while removing stored object workflows for the %s extension.', array($this->getName())));
        }
    
        try {
            DoctrineHelper::dropSchema($this->entityManager, $this->listEntityClasses());
        } catch (\Exception $e) {
            if (System::isDevelopmentMode()) {
                LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
            }
            return LogUtil::registerError($this->__f('An error was encountered while dropping the tables for the %s extension.', array($this->name)));
        }
    
        // unregister persistent event handlers
        EventUtil::unregisterPersistentModuleHandlers($this->name);
    
        // unregister hook subscriber bundles
        HookUtil::unregisterSubscriberBundles($this->version->getHookSubscriberBundles());
        
    
        // remove all module vars
        $this->delVars();
    
        // remove category registry entries
        ModUtil::dbInfoLoad('Categories');
        DBUtil::deleteWhere('categories_registry', 'modname = \'' . $this->name . '\'');
    
        // remove all thumbnails
        $manager = $this->getServiceManager()->getService('systemplugin.imagine.manager');
        $manager->setModule($this->name);
        $manager->cleanupModuleThumbs();
    
        // remind user about upload folders not being deleted
        $uploadPath = FileUtil::getDataDirectory() . '/' . $this->name . '/';
        LogUtil::registerStatus($this->__f('The upload directories at [%s] can be removed manually.', $uploadPath));
    
        // deletion successful
        return true;
    }
    
    /**
     * Build array with all entity classes for MUTicket.
     *
     * @return array list of class names.
     */
    protected function listEntityClasses()
    {
        $classNames = array();
        $classNames[] = 'MUTicket_Entity_Ticket';
        $classNames[] = 'MUTicket_Entity_TicketCategory';
        $classNames[] = 'MUTicket_Entity_Rating';
        $classNames[] = 'MUTicket_Entity_Supporter';
        $classNames[] = 'MUTicket_Entity_CurrentState';
        $classNames[] = 'MUTicket_Entity_Label';
    
        return $classNames;
    }
    
    /**
     * Create the default data for MUTicket.
     *
     * @param array $categoryRegistryIdsPerEntity List of category registry ids.
     *
     * @return void
     */
    protected function createDefaultData($categoryRegistryIdsPerEntity)
    {
        $entityClass = 'MUTicket_Entity_Ticket';
        $this->entityManager->getRepository($entityClass)->truncateTable();
        $entityClass = 'MUTicket_Entity_Rating';
        $this->entityManager->getRepository($entityClass)->truncateTable();
        $entityClass = 'MUTicket_Entity_Supporter';
        $this->entityManager->getRepository($entityClass)->truncateTable();
        $entityClass = 'MUTicket_Entity_CurrentState';
        $this->entityManager->getRepository($entityClass)->truncateTable();
        $entityClass = 'MUTicket_Entity_Label';
        $this->entityManager->getRepository($entityClass)->truncateTable();
    }
    
    /**
     * Register persistent event handlers.
     * These are listeners for external events of the core and other modules.
     */
    protected function registerPersistentEventHandlers()
    {
        // core -> 
        EventUtil::registerPersistentModuleHandler('MUTicket', 'api.method_not_found', array('MUTicket_Listener_Core', 'apiMethodNotFound'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'core.preinit', array('MUTicket_Listener_Core', 'preInit'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'core.init', array('MUTicket_Listener_Core', 'init'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'core.postinit', array('MUTicket_Listener_Core', 'postInit'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'controller.method_not_found', array('MUTicket_Listener_Core', 'controllerMethodNotFound'));
    
        // front controller -> MUTicket_Listener_FrontController
        EventUtil::registerPersistentModuleHandler('MUTicket', 'frontcontroller.predispatch', array('MUTicket_Listener_FrontController', 'preDispatch'));
    
        // installer -> MUTicket_Listener_Installer
        EventUtil::registerPersistentModuleHandler('MUTicket', 'installer.module.installed', array('MUTicket_Listener_Installer', 'moduleInstalled'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'installer.module.upgraded', array('MUTicket_Listener_Installer', 'moduleUpgraded'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'installer.module.uninstalled', array('MUTicket_Listener_Installer', 'moduleUninstalled'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'installer.subscriberarea.uninstalled', array('MUTicket_Listener_Installer', 'subscriberAreaUninstalled'));
    
        // modules -> MUTicket_Listener_ModuleDispatch
        EventUtil::registerPersistentModuleHandler('MUTicket', 'module_dispatch.postloadgeneric', array('MUTicket_Listener_ModuleDispatch', 'postLoadGeneric'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'module_dispatch.preexecute', array('MUTicket_Listener_ModuleDispatch', 'preExecute'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'module_dispatch.postexecute', array('MUTicket_Listener_ModuleDispatch', 'postExecute'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'module_dispatch.custom_classname', array('MUTicket_Listener_ModuleDispatch', 'customClassname'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'module_dispatch.service_links', array('MUTicket_Listener_ModuleDispatch', 'serviceLinks'));
    
        // mailer -> MUTicket_Listener_Mailer
        EventUtil::registerPersistentModuleHandler('MUTicket', 'module.mailer.api.sendmessage', array('MUTicket_Listener_Mailer', 'sendMessage'));
    
        // page -> MUTicket_Listener_Page
        EventUtil::registerPersistentModuleHandler('MUTicket', 'pageutil.addvar_filter', array('MUTicket_Listener_Page', 'pageutilAddvarFilter'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'system.outputfilter', array('MUTicket_Listener_Page', 'systemOutputfilter'));
    
        // errors -> MUTicket_Listener_Errors
        EventUtil::registerPersistentModuleHandler('MUTicket', 'setup.errorreporting', array('MUTicket_Listener_Errors', 'setupErrorReporting'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'systemerror', array('MUTicket_Listener_Errors', 'systemError'));
    
        // theme -> MUTicket_Listener_Theme
        EventUtil::registerPersistentModuleHandler('MUTicket', 'theme.preinit', array('MUTicket_Listener_Theme', 'preInit'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'theme.init', array('MUTicket_Listener_Theme', 'init'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'theme.load_config', array('MUTicket_Listener_Theme', 'loadConfig'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'theme.prefetch', array('MUTicket_Listener_Theme', 'preFetch'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'theme.postfetch', array('MUTicket_Listener_Theme', 'postFetch'));
    
        // view -> MUTicket_Listener_View
        EventUtil::registerPersistentModuleHandler('MUTicket', 'view.init', array('MUTicket_Listener_View', 'init'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'view.postfetch', array('MUTicket_Listener_View', 'postFetch'));
    
        // user login -> MUTicket_Listener_UserLogin
        EventUtil::registerPersistentModuleHandler('MUTicket', 'module.users.ui.login.started', array('MUTicket_Listener_UserLogin', 'started'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'module.users.ui.login.veto', array('MUTicket_Listener_UserLogin', 'veto'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'module.users.ui.login.succeeded', array('MUTicket_Listener_UserLogin', 'succeeded'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'module.users.ui.login.failed', array('MUTicket_Listener_UserLogin', 'failed'));
    
        // user logout -> MUTicket_Listener_UserLogout
        EventUtil::registerPersistentModuleHandler('MUTicket', 'module.users.ui.logout.succeeded', array('MUTicket_Listener_UserLogout', 'succeeded'));
    
        // user -> MUTicket_Listener_User
        EventUtil::registerPersistentModuleHandler('MUTicket', 'user.gettheme', array('MUTicket_Listener_User', 'getTheme'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'user.account.create', array('MUTicket_Listener_User', 'create'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'user.account.update', array('MUTicket_Listener_User', 'update'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'user.account.delete', array('MUTicket_Listener_User', 'delete'));
    
        // registration -> MUTicket_Listener_UserRegistration
        EventUtil::registerPersistentModuleHandler('MUTicket', 'module.users.ui.registration.started', array('MUTicket_Listener_UserRegistration', 'started'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'module.users.ui.registration.succeeded', array('MUTicket_Listener_UserRegistration', 'succeeded'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'module.users.ui.registration.failed', array('MUTicket_Listener_UserRegistration', 'failed'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'user.registration.create', array('MUTicket_Listener_UserRegistration', 'create'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'user.registration.update', array('MUTicket_Listener_UserRegistration', 'update'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'user.registration.delete', array('MUTicket_Listener_UserRegistration', 'delete'));
    
        // users module -> MUTicket_Listener_Users
        EventUtil::registerPersistentModuleHandler('MUTicket', 'module.users.config.updated', array('MUTicket_Listener_Users', 'configUpdated'));
    
        // group -> MUTicket_Listener_Group
        EventUtil::registerPersistentModuleHandler('MUTicket', 'group.create', array('MUTicket_Listener_Group', 'create'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'group.update', array('MUTicket_Listener_Group', 'update'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'group.delete', array('MUTicket_Listener_Group', 'delete'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'group.adduser', array('MUTicket_Listener_Group', 'addUser'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'group.removeuser', array('MUTicket_Listener_Group', 'removeUser'));
    
        // special purposes and 3rd party api support -> MUTicket_Listener_ThirdParty
        EventUtil::registerPersistentModuleHandler('MUTicket', 'get.pending_content', array('MUTicket_Listener_ThirdParty', 'pendingContentListener'));
        EventUtil::registerPersistentModuleHandler('MUTicket', 'module.content.gettypes', array('MUTicket_Listener_ThirdParty', 'contentGetTypes'));
    }
}
