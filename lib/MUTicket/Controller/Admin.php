<?php
/**
 * MUTicket.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUTicket
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.0 (http://modulestudio.de) at Sun Aug 18 17:24:12 CEST 2013.
 */

/**
 * This is the Admin controller class providing navigation and interaction functionality.
 */
class MUTicket_Controller_Admin extends MUTicket_Controller_Base_Admin
{
    /**
     * Post initialise.
     *
     * Run after construction.
     *
     * @return void
     */
    protected function postInitialize()
    {
        // Set caching to true by default.
        $this->view->setCaching(Zikula_View::CACHE_DISABLED);
    }

    /**
     * This method is the default function, and is called whenever the application's
     * Admin area is called without defining arguments.
     *
     * @return mixed Output.
     */
    public function main(array $args = array())
    {
        // DEBUG: permission check aspect starts
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('MUTicket::', '::', ACCESS_ADMIN));
        // DEBUG: permission check aspect ends


        // return viewtemplate
        return $this->redirect(ModUtil::url($this->name, 'admin', 'view', array('ot' => 'supporter')));

    }

    /**
     * This method provides a generic item list overview. We redirect to user area
     * if the admin is calling the ticket view
     *
     * @return redirect
     */
    public function view(array $args = array())
    {
        // DEBUG: permission check aspect starts
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('MUTicket::', '::', ACCESS_ADMIN));
        // DEBUG: permission check aspect ends

        if ($args['ot'] == 'ticket') {
            return System::redirect(ModUtil::url($this->name, 'user', 'view', array('ot' => 'ticket')));
        }
        else {
            return parent::view($args);
        }

    }

    /**
     * This method is the function for showing rating statistics of a supporter
     *
     *@param string  $ot           Treated object type.
     */

    public function rating(array $args = array())
    {
        // DEBUG: permission check aspect starts
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('MUTicket::', '::', ACCESS_ADMIN));
        // DEBUG: permission check aspect ends

        $objectType = (isset($args['ot']) && !empty($args['ot'])) ? $args['ot'] : $this->request->query->filter('ot', 'ticket', FILTER_SANITIZE_STRING);
        $rated = (isset($args['rated']) && !empty($args['rated'])) ? $args['rated'] : $this->request->query->filter('rated', 0, FILTER_SANITIZE_STRING);
        $uid = (isset($args['supporter']) && !empty($args['supporter'])) ? $args['supporter'] : $this->request->query->filter('supporter', '', FILTER_SANITIZE_STRING);

        $supporteruid = MUTicket_Util_Model::getExistingSupporterUids($uid);

        $supporterrepository = MUTicket_Util_Model::getSupporterRepository();

        $supporter = $supporterrepository->selectById($uid);
        $supportername = $supporter['username'];

        $serviceManager = ServiceUtil::getManager();
        $modelHelper = new MUTicket_Util_Model($serviceManager);

        // we get a repository for tickets
        $ticketRepository = $modelHelper->getTicketRepository();

        // where clause for getting answers of this supporter
        $where = 'tbl.createdUserId = \'' . $supporteruid . '\'';
        $where .= ' AND ';
        $where .= 'tbl.parent_id IS NOT NULL';

        // itemcount of not parent tickets of supporter without pagination
        $counttickets = $ticketRepository->selectCount($where);

        // where clause for getting rated answers of this supporter
        $where2 = 'tbl.createdUserId = \'' . $supporteruid . '\'';
        $where2 .= ' AND ';
        $where2 .= 'tbl.parent_id IS NOT NULL';
        $where2 .= ' AND ';
        $where2 .= 'tbl.rated = 1';
        // item list of rated tickets of supporter with pagination
        $entities = $ticketRepository->selectWhere($where2, $useJoins = false);

        $total = 0;

        // we get a repository for ratings
        $ratingrepository = $modelHelper->getRatingRepository();

        foreach ($entities as $entity) {
            if (is_object($entity)) {
                $where3 = 'tbl.ticket = \'' . $entity['id'] . '\'';
            }
            $rating = $ratingrepository->selectWhere($where3);
            $total = $total + $rating[0]['ratingvalue'];
        }

        $objectCount = count($entities);

        if($total > 0) {
            $average = $total / $objectCount;
            $average = round($average, 1);

            // percent of rated tickets
            $percent = $objectCount / $counttickets * 100;
            $percent = round($percent, 2);
        } else {
            $average = 0;
            $percent = 0;
        }

        // assign all to template
        $this->view->assign('items', $entities )
        ->assign('counttickets', $counttickets)
        ->assign('objectcount', $objectCount)
        ->assign('percent', $percent)
        ->assign('total', $total)
        ->assign('average', $average)
        ->assign('supporter', $supportername );

        // fetch and return the appropriate template
        $viewHelper = new MUTicket_Util_View($this->serviceManager);

        return $viewHelper->processTemplate($this->view, 'admin', $objectType, 'rating', $args);
    }
}
