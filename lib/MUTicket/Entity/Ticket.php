<?php
/**
 * MUTicket.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUTicket
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.1 (http://modulestudio.de) at Sat Aug 31 12:39:20 CEST 2013.
 */

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the concrete entity class for ticket entities.
 * @ORM\Entity(repositoryClass="MUTicket_Entity_Repository_Ticket")
 * @ORM\Table(name="muticket_ticket",
 *     indexes={
 *         @ORM\Index(name="workflowstateindex", columns={"workflowState"})
 *     }
 * )
 * @ORM\HasLifecycleCallbacks
 */
class MUTicket_Entity_Ticket extends MUTicket_Entity_Base_Ticket
{
    /**
     * Unidirectional - Many ticketlabel [tickets] have many labelticket [labels] (OWNING SIDE).
     *
     * @ORM\ManyToMany(targetEntity="MUTicket_Entity_Label")
     * @ORM\JoinTable(name="muticket_ticket_label")
     * @ORM\OrderBy({"name" = "ASC"})
     * @var MUTicket_Entity_Label[] $labelticket.
     */
    protected $labelticket = null;

    /**
     * Collect available actions for this entity.
     */
    protected function prepareItemActions()
    {
        if (!empty($this->_actions)) {
            return;
        }

        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $dom = ZLanguage::getModuleDomain('MUTicket');
        if ($currentType == 'admin') {
            if (in_array($currentFunc, array('main', 'view'))) {
                /* $this->_actions[] = array(
                 'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'ticket', 'id' => $this['id'])),
                        'icon' => 'preview',
                        'linkTitle' => __('Open preview page', $dom),
                        'linkText' => __('Preview', $dom)
                );
                $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'display', 'arguments' => array('ot' => 'ticket', 'id' => $this['id'])),
                        'icon' => 'display',
                        'linkTitle' => str_replace('"', '', $this['title']),
                        'linkText' => __('Details', $dom)
                );*/
            }
            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                $component = 'MUTicket:Ticket:';
                $instance = $this->id . '::';
                if (SecurityUtil::checkPermission($component, $instance, ACCESS_EDIT)) {
                    /* $this->_actions[] = array(
                     'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'ticket', 'id' => $this['id'])),
                            'icon' => 'edit',
                            'linkTitle' => __('Edit', $dom),
                            'linkText' => __('Edit', $dom)
                    );
                    $this->_actions[] = array(
                            'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'ticket', 'astemplate' => $this['id'])),
                            'icon' => 'saveas',
                            'linkTitle' => __('Reuse for new item', $dom),
                            'linkText' => __('Reuse', $dom)
                    );*/
                }
                if (SecurityUtil::checkPermission($component, $instance, ACCESS_DELETE)) {
                    $this->_actions[] = array(
                            'url' => array('type' => 'admin', 'func' => 'delete', 'arguments' => array('ot' => 'ticket', 'id' => $this['id'])),
                            'icon' => 'delete',
                            'linkTitle' => __('Delete', $dom),
                            'linkText' => __('Delete', $dom)
                    );
                }
            }
            /* if ($currentFunc == 'display') {
             $this->_actions[] = array(
                     'url' => array('type' => 'admin', 'func' => 'view', 'arguments' => array('ot' => 'ticket')),
                     'icon' => 'back',
                     'linkTitle' => __('Back to overview', $dom),
                     'linkText' => __('Back to overview', $dom)
             );
            }*/
        }
        if ($currentType == 'user') {
            if (in_array($currentFunc, array('main', 'view'))) {
                $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'ticket', 'id' => $this['id'])),
                        'icon' => 'display',
                        'linkTitle' => str_replace('"', '', $this['title']),
                        'linkText' => __('Details', $dom)
                );
            }
            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                $component = 'MUTicket:Ticket:';
                $instance = $this->id . '::';
                if (SecurityUtil::checkPermission($component, $instance, ACCESS_EDIT)) {
                    if ($this['createdUserId'] == UserUtil::getVar('uid') || $this['owner'] == UserUtil::getVar('uid')) {
                        $this->_actions[] = array(
                                'url' => array('type' => 'user', 'func' => 'edit', 'arguments' => array('ot' => 'ticket', 'id' => $this['id'])),
                                'icon' => 'edit',
                                'linkTitle' => __('Edit', $dom),
                                'linkText' => __('Edit', $dom)
                        );
                    }
                    /* $this->_actions[] = array(
                     'url' => array('type' => 'user', 'func' => 'edit', 'arguments' => array('ot' => 'ticket', 'astemplate' => $this['id'])),
                            'icon' => 'saveas',
                            'linkTitle' => __('Reuse for new item', $dom),
                            'linkText' => __('Reuse', $dom)
                    );*/
                }
                /* if (SecurityUtil::checkPermission($component, $instance, ACCESS_DELETE)) {
                 $this->_actions[] = array(
                         'url' => array('type' => 'user', 'func' => 'delete', 'arguments' => array('ot' => 'ticket', 'id' => $this['id'])),
                         'icon' => 'delete',
                         'linkTitle' => __('Delete', $dom),
                         'linkText' => __('Delete', $dom)
                 );
                }*/
            }
            if ($currentFunc == 'display') {
                $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'view', 'arguments' => array('ot' => 'ticket')),
                        'icon' => 'back',
                        'linkTitle' => __('Back to overview', $dom),
                        'linkText' => __('Back to overview', $dom)
                );
            }
        }
    }

    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     *
     * @ORM\PostLoad
     * @see MUTicket_Entity_Ticket::performPostLoadCallback()
     * @return void.
     */
    public function postLoadCallback()
    {
        $this->performPostLoadCallback();
    }

    /**
     * Pre-Process the data prior to an insert operation.
     *
     * @ORM\PrePersist
     * @see MUTicket_Entity_Ticket::performPrePersistCallback()
     * @return void.
     */
    public function prePersistCallback()
    {
        $request = new Zikula_Request_Http();
        $parent = $request->request->filter('muticketTicket_ParentMode', 0, FILTER_SANITIZE_NUMBER_INT);
        if ($parent != 0) {
            $repository = MUTicket_Util_Model::getTicketRepository();
            $thisparent = $repository->selectById($parent);
            $this->setParent($thisparent);

        }
        $this->setWorkflowState('approved');
        $this->performPrePersistCallback();
    }

    /**
     * Post-Process the data after an insert operation.
     *
     * @ORM\PostPersist
     * @see MUTicket_Entity_Ticket::performPostPersistCallback()
     * @return void.
     */
    public function postPersistCallback()
    {
        $this->performPostPersistCallback();
    }

    /**
     * Pre-Process the data prior a delete operation.
     *
     * @ORM\PreRemove
     * @see MUTicket_Entity_Ticket::performPreRemoveCallback()
     * @return void.
     */
    public function preRemoveCallback()
    {
        $rating = $this->getRating();
        if ($rating) {
            // we get manager
            $serviceManager = ServiceUtil::getManager();
            // we get model helper
            $modelHelper = new MUTicket_Util_Model($serviceManager);
            // we get a repository
            $ratingRepository = $modelHelper->getRatingRepository();
            // we get the rating object
            $thisRating = $ratingRepository->selectById($rating['id']);
            // we get a entity manager
            $entityManager = $serviceManager->getService('doctrine.entitymanager');
            // we remove
            $entityManager->remove($thisRating);
            $entityManager->flush();
        }        
        
        $this->performPreRemoveCallback();
    }

    /**
     * Post-Process the data after a delete.
     *
     * @ORM\PostRemove
     * @see MUTicket_Entity_Ticket::performPostRemoveCallback()
     * @return void
     */
    public function postRemoveCallback()
    {
        $this->performPostRemoveCallback();
    }

    /**
     * Pre-Process the data prior to an update operation.
     *
     * @ORM\PreUpdate
     * @see MUTicket_Entity_Ticket::performPreUpdateCallback()
     * @return void.
     */
    public function preUpdateCallback()
    {
        $this->performPreUpdateCallback();
    }

    /**
     * Post-Process the data after an update operation.
     *
     * @ORM\PostUpdate
     * @see MUTicket_Entity_Ticket::performPostUpdateCallback()
     * @return void.
     */
    public function postUpdateCallback()
    {
        $this->performPostUpdateCallback();
    }

    /**
     * Pre-Process the data prior to a save operation.
     *
     * @ORM\PrePersist
     * @ORM\PreUpdate
     * @see MUTicket_Entity_Ticket::performPreSaveCallback()
     * @return void.
     */
    public function preSaveCallback()
    {
        $this->performPreSaveCallback();
    }

    /**
     * Post-Process the data after a save operation.
     *
     * @ORM\PostPersist
     * @ORM\PostUpdate
     * @see MUTicket_Entity_Ticket::performPostSaveCallback()
     * @return void.
     */
    public function postSaveCallback()
    {
        $this->performPostSaveCallback();
    }

}
