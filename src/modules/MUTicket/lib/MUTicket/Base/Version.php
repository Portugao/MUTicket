<?php
/**
 * MUTicket.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUTicket
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.2 (http://modulestudio.de) at Sun Sep 11 16:08:57 CEST 2011.
 */

/**
 * Version information base class.
 */
class MUTicket_Base_Version extends Zikula_AbstractVersion
{
    public function getMetaData()
    {
        $meta = array();
        // the current module version
        $meta['version']              = '1.0.0';
        // the displayed name of the module
        $meta['displayname']          = $this->__('MUTicket');
        // the module description
        $meta['description']          = $this->__('MUTicket module generated by ModuleStudio 0.5.2.');
        //! url version of name, should be in lowercase without space
        $meta['url']                  = $this->__('muticket');
        // core requirement
        $meta['core_min']             = '1.3.1'; // requires minimum 1.3.1 or later
        $meta['core_max']             = '1.3.99'; // not ready for 1.4.0 yet

        // define special capabilities of this module
        $meta['capabilities'] = array(
                          HookUtil::SUBSCRIBER_CAPABLE => array('enabled' => true)
/*,
                          HookUtil::PROVIDER_CAPABLE => array('enabled' => true), // TODO: see #15
                          'authentication' => array('version' => '1.0'),
                          'profile'        => array('version' => '1.0', 'anotherkey' => 'anothervalue'),
                          'message'        => array('version' => '1.0', 'anotherkey' => 'anothervalue')
*/
        );

        // permission schema
        // DEBUG: permission schema aspect starts
        $meta['securityschema'] = array(
            'MUTicket::' => '::',

            'MUTicket:Ticket:Ticket' => 'TicketID:TicketID:',

            'MUTicket:Ticket:' => 'TicketID::',
            'MUTicket:Ticket:Rating' => 'TicketID:RatingID:',

            'MUTicket:Rating:' => 'RatingID::',
            'MUTicket:Supporter:' => 'SupporterID::'
        );
        // DEBUG: permission schema aspect ends



        return $meta;
    }

    /**
     * Define hook subscriber bundles.
     */
    protected function setupHookBundles()
    {

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.muticket.ui_hooks.tickets', 'ui_hooks', __('muticket Tickets Display Hook'));
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'muticket.ui_hooks.tickets.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'muticket.ui_hooks.tickets.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'muticket.ui_hooks.tickets.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'muticket.ui_hooks.tickets.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'muticket.ui_hooks.tickets.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'muticket.ui_hooks.tickets.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'muticket.ui_hooks.tickets.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.muticket.filter_hooks.tickets', 'filter_hooks', __('muticket Tickets Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'muticket.filter_hooks.tickets.filter');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.muticket.ui_hooks.ratings', 'ui_hooks', __('muticket Ratings Display Hook'));
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'muticket.ui_hooks.ratings.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'muticket.ui_hooks.ratings.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'muticket.ui_hooks.ratings.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'muticket.ui_hooks.ratings.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'muticket.ui_hooks.ratings.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'muticket.ui_hooks.ratings.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'muticket.ui_hooks.ratings.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.muticket.filter_hooks.ratings', 'filter_hooks', __('muticket Ratings Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'muticket.filter_hooks.ratings.filter');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.muticket.ui_hooks.supporters', 'ui_hooks', __('muticket Supporters Display Hook'));
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'muticket.ui_hooks.supporters.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'muticket.ui_hooks.supporters.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'muticket.ui_hooks.supporters.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'muticket.ui_hooks.supporters.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'muticket.ui_hooks.supporters.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'muticket.ui_hooks.supporters.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'muticket.ui_hooks.supporters.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.muticket.filter_hooks.supporters', 'filter_hooks', __('muticket Supporters Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'muticket.filter_hooks.supporters.filter');
        $this->registerHookSubscriberBundle($bundle);


    }
}

