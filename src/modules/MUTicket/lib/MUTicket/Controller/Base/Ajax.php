<?php
/**
 * MUTicket.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUTicket
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.2 (http://modulestudio.de) at Thu Sep 15 21:40:56 CEST 2011.
 */

/**
 * Ajax controller class.
 */
class MUTicket_Controller_Base_Ajax extends Zikula_Controller_AbstractAjax
{

    /**
     * This method is the default function, and is called whenever the
     * module's Ajax area is called without defining arguments.
     *
     * @return mixed Output.
     */
    public function main($args)
    {
        // DEBUG: permission check aspect starts
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('MUTicket::', '::', ACCESS_OVERVIEW));
        // DEBUG: permission check aspect ends

    }

    /**
     * Searches for entities for auto completion usage.
     *
     * @param string $ot       Treated object type.
     * @param string $fragment The fragment of the entered item name.
     * @param string $exclude  Comma separated list with ids of other items (to be excluded from search).
     *
     * @return Zikula_Response_Ajax_Base
     */
    public function getItemList()
    {
        if (!SecurityUtil::checkPermission('MUTicket::', '::', ACCESS_EDIT)) {
            return true;
        }

        $objectType = 'ticket';
        if ($this->request->isPost() && $this->request->getPost()->has('ot')) {
            $objectType = $this->request->getPost()->filter('ot', 'ticket', FILTER_SANITIZE_STRING);
        } elseif ($this->request->isGet() && $this->request->getGet()->has('ot')) {
            $objectType = $this->request->getGet()->filter('ot', 'ticket', FILTER_SANITIZE_STRING);
        }
        if (!in_array($objectType, MUTicket_Util_Controller::getObjectTypes('controllerAction', array('controller' => 'ajax', 'action' => 'getItemList')))) {
            $objectType = MUTicket_Util_Controller::getDefaultObjectType('controllerAction', array('controller' => 'ajax', 'action' => 'getItemList'));
        }

        $entityClass = 'MUTicket_Entity_' . ucfirst($objectType);
        $repository = $this->entityManager->getRepository($entityClass);

        $objectTemp = new $entityClass();
        $idFields = $objectTemp->get_idFields();

        $fragment = '';
        $exclude = '';
        if ($this->request->isPost() && $this->request->getPost()->has('fragment')) {
            $fragment = $this->request->getPost()->get('fragment', '');
            $exclude = $this->request->getPost()->get('exclude', '');
        } elseif ($this->request->isGet() && $this->request->getGet()->has('fragment')) {
            $fragment = $this->request->getGet()->get('fragment', '');
            $exclude = $this->request->getGet()->get('exclude', '');
        }
        $exclude = ((!empty($exclude)) ? array($exclude) : array());

        // parameter for used sorting field
        $sort = $this->request->getGet()->get('sort', '');
        if (empty($sort) || !in_array($sort, $repository->getAllowedSortingFields())) {
            $sort = $repository->getDefaultSortingField();
        }
        $sortParam = $sort . ' asc';

        $currentPage = 1;
        $resultsPerPage = 20;

        // get objects from database
        list($objectData, $objectCount) = $repository->selectSearch($fragment, $exclude, $sortParam, $currentPage, $resultsPerPage);

        $out = '<ul>';
        if ((is_array($objectData) || is_object($objectData)) && count($objectData) > 0) {
            $titleFieldName = $descriptionFieldName = '';

            switch ($objectType) {
                case 'ticket':
                    $titleFieldName = 'title';
                    $descriptionFieldName = 'text';
                    break;
                case 'rating':
                    $titleFieldName = 'ratingvalue';
                    break;
                case 'supporter':
                    $titleFieldName = 'username';
                    $descriptionFieldName = 'supportcats';
                    break;
            }

            $thumbWidth = 100;
            $thumbHeight = 80;
            foreach ($objectData as $item) {
                // class="informal" --> show in dropdown, but do not copy in the input field after selection
                $itemTitle = ((!empty($titleFieldName)) ? $item[$titleFieldName] : $this->__('Item'));
                $itemTitleStripped = str_replace('"', '', $itemTitle);
                $itemDescription = ((isset($item[$descriptionFieldName]) && !empty($item[$descriptionFieldName])) ? $item[$descriptionFieldName] : ''); //$this->__('No description yet.'));
                $itemId = '';
                foreach ($idFields as $idField) {
                    $itemId .= ((!empty($itemId)) ? '_' : '') . $item[$idField];
                }
                $out .= '<li id="' . $itemId . '" title="' . $itemTitleStripped . '">';
                $out .= '<div class="itemtitle">' . $itemTitle . '</div>';
                if (!empty($itemDescription)) {
                    $out .= '<div class="itemdesc informal">' . $itemDescription . '</div>';
                }
                // check for preview image
                $previewFieldName = '';
                switch ($objectType) {
                    case 'ticket':
                        $previewFieldName = 'images';
                        break;

                }
                if (!empty($previewFieldName) && !empty($item[$previewFieldName]) && isset($item[$previewFieldName . 'FullPath'])) {
                    $thumbImagePath = MUTicket_Util_Image::getThumb($item[$previewFieldName], $item[$previewFieldName . 'FullPath'], $thumbWidth, $thumbHeight);
                    $preview = '<img src="' . $thumbImagePath . '" width="' . $thumbWidth . '" height="' . $thumbHeight . '" alt="' . $itemTitleStripped . '" />';
                    $out .= '<div class="itempreview informal" id="itempreview' . $itemId . '">' . $preview . '</div>';
                }
                $out .= '</li>';
            }
        }
        $out .= '</ul>';
        return new Zikula_Response_Ajax_Plain($out);
    }
}
