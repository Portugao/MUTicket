<?php
/**
 * MUTicket.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUTicket
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.2 (http://modulestudio.de) at Fri Sep 09 12:59:32 CEST 2011.
 */

/**
 * This handler class handles the page events of the Form called by the MUTicket_admin_edit() function.
 * It aims on the supporter object type.
 */
//use Doctrine\ORM\Query\AST\Functions\ModFunction;
class MUTicket_Form_Handler_Admin_Supporter_Edit extends MUTicket_Form_Handler_Base_Admin_Supporter_Edit

{
	
    /**
     * Command event handler.
     *
     * This event handler is called when a command is issued by the user. Commands are typically something
     * that originates from a {@link Zikula_Form_Plugin_Button} plugin. The passed args contains different properties
     * depending on the command source, but you should at least find a <var>$args['commandName']</var>
     * value indicating the name of the command. The command name is normally specified by the plugin
     * that initiated the command.
     * @see Zikula_Form_Plugin_Button
     * @see Zikula_Form_Plugin_ImageButton
     */
    public function handleCommand(Zikula_Form_View $view, &$args)
    {
        if ($args['commandName'] == 'delete') {
            if (!SecurityUtil::checkPermission('MUTicket:Supporter:', '::', ACCESS_DELETE)) {
                return $this->view->setErrorMsg(LogUtil::registerPermissionError());
            }
        }

        $selectedRelations = array();
        $this->view->assign('selectedRelations', $selectedRelations);

        if (!in_array($args['commandName'], array('delete', 'cancel'))) {
            // do forms validation including checking all validators on the page to validate their input
            if (!$this->view->isValid()) {
                return false;
            }
        }

        $this->objectType = 'supporter';

        $entityClass = 'MUTicket_Entity_' . ucfirst($this->objectType);
        $repository = $this->entityManager->getRepository($entityClass);

        // get treated entity reference from persisted member var
        $supporter = $this->supporterRef;

        // fetch posted data input values as an associative array
        $formData = $this->view->getValues();
        // we want the array with our field values
        $supporterData = $formData['supporter'];
        
        if (isset($supporterData['supportcats']) && is_array($supporterData['supportcats'])) {
        $supporterData['supportcats'] = serialize($supporterData['supportcats']);
		} 
		       
        unset($formData['supporter']);

        $repeatCreateAction = false;
        if ($args['commandName'] == 'create' && isset($supporterData['repeatcreation'])) {
            $repeatCreateAction = $supporterData['repeatcreation'];
            unset($supporterData['repeatcreation']);
        }

        // assign fetched data
        $supporter->merge($supporterData);

        if (in_array($args['commandName'], array('create', 'update'))) {
            // event handling if user clicks on create or update

            // Let any hooks perform additional validation actions
            $hook = new Zikula_ValidationHook('muticket.ui_hooks.supporters.validate_edit', new Zikula_Hook_ValidationProviders());
            $validators = $this->notifyHooks($hook)->getValidators();
            // TODO validation incomplete (#36)

            // save supporter
            $successMessage = '';
            $this->updateRelationLinks($supporter);
            //$this->entityManager->transactional(function($entityManager) {
            $this->entityManager->persist($supporter);
            $this->entityManager->flush();
            //});

            if ($args['commandName'] == 'create') {
                $successMessage = $this->__('Done! Supporter created.');
            } else if ($args['commandName'] == 'update') {
                $successMessage = $this->__('Done! Supporter updated.');
            }

            if ($args['commandName'] == 'create') {
                // store new identifier
                $this->idValues['id'] = $supporter->getId();
                // check if the insert has worked, might become obsolete due to exception usage
                if (!$this->idValues['id']) {
                    return $this->view->setErrorMsg($this->__('Error! Creation attempt failed.'));
                }
            } else if ($args['commandName'] == 'update') {
            }

            LogUtil::registerStatus($successMessage);

            // Let any hooks know that we have created or updated an item
            $url = new Zikula_ModUrl('MUTicket', 'admin', 'display', ZLanguage::getLanguageCode(), array('ot' => $this->objectType, 'id' => $this->idValues['id']));
            $hook = new Zikula_ProcessHook('muticket.ui_hooks.supporters.process_edit', $this->id, $url);
            $this->notifyHooks($hook);
        } else if ($args['commandName'] == 'delete') {
            // event handling if user clicks on delete

            // Let any hooks perform additional validation actions
            $hook = new Zikula_ValidationHook('muticket.ui_hooks.supporters.validate_delete', new Zikula_Hook_ValidationProviders());
            $validators = $this->notifyHooks($hook)->getValidators();
            // TODO validation incomplete (#36)

            // delete supporter
            $this->entityManager->remove($supporter);
            $this->entityManager->flush();

            LogUtil::registerStatus($this->__('Done! Supporter deleted.'));

            // Let any hooks know that we have deleted an item
            $hook = new Zikula_ProcessHook('muticket.ui_hooks.supporters.process_delete', $this->id);
            $this->notifyHooks($hook);
        } else if ($args['commandName'] == 'cancel') {
            // event handling if user clicks on cancel
            }

        if ($args['commandName'] != 'cancel') {
            // clear view cache to reflect our changes
            $this->view->clear_cache();
        }

        if ($this->mode == 'edit') {
            ModUtil::apiFunc('PageLock', 'user', 'releaseLock',
                array('lockName' => 'MUTicketSupporter' . $this->id));
        }
        return $this->view->redirect($this->getRedirectUrl($args, $supporter, $repeatCreateAction));

        // We should in principle not end here at all, since the above command handlers should
        // match all possible commands, but we return "ok" (true) for all cases.
        // You could also return $this->view->setErrorMsg('Unexpected command')
        return true;
    }
    
    
    /**
     * Custom initialisation tasks.
     */
    protected function initializeAdditions()
    {
    	$supportergroup = $this->getVar('supportergroup');
    	
    	ModUtil::dbInfoLoad('Groups');
    	ModUtil::dbInfoLoad('Categories');
    	$tables = DBUtil::getTables();
    	$categoryregistry_column = $tables['categories_registry_column'];
    	$categorycategory_column = $tables['categories_category_column'];
    	$groups_column = $tables['groups_column'];
    	$users_column = $tables['users_column'];
    	
    	$column = array('gid');
    	$where = "WHERE $groups_column[name] = '" . DataUtil::formatForStore($supportergroup) . "'";
    	$suppgroupid = DBUtil::selectObject('groups', $where);
    	
    //  make dropdownlist for categories
    
    	//get categories for the ticket table
    	
    	$where2 = "WHERE $categoryregistry_column[modname] = '" . DataUtil::formatForStore('MUTicket') . "' AND $categoryregistry_column[table] = '" . DataUtil::formatForStore('Ticket') . "'";
  	
    	$categorypaths = DBUtil::selectObjectArray('categories_registry', $where2);
    	if ($categorypaths == false) {
    		LogUtil::registerError($this->__('Error! No category path available. You have to apply one!'), 404);
    	}
    	
    	//get subcategories of the maincategory

    	$supportcats = array();
    	
    	foreach ($categorypaths as $categorypath) {
    		$where3 = "WHERE $categorycategory_column[parent_id] = '" . DataUtil::formatForStore($categorypath[category_id]) . "'";
    		$categories = DBUtil::selectObjectArray('categories_category',$where3);
    		foreach ($categories as $category)  {
    		$supportcats[] = array('value' => $category['name'], 'text' => $category['name']);
    		}	    		
    	}
    	
     // make dropdownlist for users
    	
    	// get users
    	
    	$where4 = "WHERE $users_column[parent_id] = '" . DataUtil::formatForStore($categorypath[category_id]) . "'";
        
        $users = DBUtil::selectObjectArray('users'); 
    	
    	$supportusers = array();
    	
    	foreach ($users as $user) {
    		if($user[uid] != 1) {
    		$supportusers[] = array('value'	=> $user['uname'], 'text' => $user['uname']);
    		}
    		
    	}
    	    	
    	$supporter = $this->view->get_template_vars('supporter');
     	$supporter['supportcatsItems'] = $supportcats;
     	$supporter['usernameItems'] = $supportusers;
     	$this->view->assign('supporter', $supporter);

    }
}