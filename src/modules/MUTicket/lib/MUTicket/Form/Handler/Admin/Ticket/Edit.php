<?php
/**
 * MUTicket.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUTicket
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.3 (http://modulestudio.de) at Tue Oct 11 10:27:49 CEST 2011.
 */

/**
 * This handler class handles the page events of the Form called by the MUTicket_admin_edit() function.
 * It aims on the ticket object type.
 */
class MUTicket_Form_Handler_Admin_Ticket_Edit extends MUTicket_Form_Handler_Base_Admin_Ticket_Edit
{
    /**
* Initialize form handler.
*
* This method takes care of all necessary initialisation of our data and form states.
*
* @return boolean False in case of initialization errors, otherwise true.
*/
    public function initialize(Zikula_Form_View $view)
    {
        $this->inlineUsage = ((UserUtil::getTheme() == 'Printer') ? true : false);
        $this->idPrefix = $this->request->getGet()->filter('idp', '', FILTER_SANITIZE_STRING);

        // initialise redirect goal
        $this->returnTo = $this->request->getGet()->filter('returnTo', null, FILTER_SANITIZE_STRING);
        // store current uri for repeated creations
        $this->repeatReturnUrl = System::getCurrentURI();

        $this->objectType = 'ticket';

        $entityClass = 'MUTicket_Entity_' . ucfirst($this->objectType);
        $repository = $this->entityManager->getRepository($entityClass);

        $objectTemp = new $entityClass();
        $idFields = $objectTemp->get_idFields();

        // retrieve identifier of the object we wish to view
        $this->idValues = MUTicket_Util_Controller::retrieveIdentifier($this->request, array(), $this->objectType, $idFields);
        $hasIdentifier = MUTicket_Util_Controller::isValidIdentifier($this->idValues);

        $entity = null;
        $this->mode = ($hasIdentifier) ? 'edit' : 'create';
        
        
        // TODO delete this part, needed only for users
        $funcType = $this->request->getGet()->filter('func', null, FILTER_SANITIZE_STRING);
        if($funcType == 'display') {
         $this->mode = 'create';
        }
        
            if($this->mode == 'create' && $funcType != 'display') {
         $this->idValues['id'] = 0;
        }
        
        if ($this->mode == 'edit') {
            if (!SecurityUtil::checkPermission('MUTicket:Ticket:', '::', ACCESS_EDIT)) {
                // set an error message and return false
                return $this->view->setErrorMsg(LogUtil::registerPermissionError());
            }

        $entity = $repository->selectById($this->idValues);
        if (!is_object($entity) || !isset($entity[$idFields[0]])) {
            return $this->view->setErrorMsg($this->__('No such item.'));
        }

            // try to guarantee that only one person at a time can be editing this ticket
            $itemID = '';
            foreach ($idFields as $idField) {
                if (!empty($itemID)) {
                    $itemID .= '_';
                }
                $itemID .= $this->idValues[$idField];
            }
            $returnUrl = ModUtil::url('MUTicket', 'user', 'display', array('ot' => 'ticket', 'id' => $this->idValues['id']));
            ModUtil::apiFunc('PageLock', 'user', 'pageLock',
                                 array('lockName' => 'MUTicketTicket' . $itemID,
                                       'returnUrl' => $returnUrl));
        }
        else {
            if (!SecurityUtil::checkPermission('MUTicket:Ticket:', '::', ACCESS_ADD)) {
                return $this->view->setErrorMsg(LogUtil::registerPermissionError());
            }

            $hasTemplateId = false;
            $templateId = $this->request->getGet()->get('astemplate', '');
            if (!empty($templateId)) {
                $templateIdValueParts = explode('_', $templateId);
                $hasTemplateId = (count($templateIdValueParts) == count($idFields));
            }
            if ($hasTemplateId === true) {
                $templateIdValues = array();
                $i = 0;
                foreach ($idFields as $idField) {
                    $templateIdValues[$idField] = $templateIdValueParts[$i];
                    $i++;
                }
                // reuse existing ticket
        $entity = $repository->selectById($templateIdValues);
        if (!is_object($entity) || !isset($entity[$idFields[0]])) {
            return $this->view->setErrorMsg($this->__('No such item.'));
        }
                //foreach ($idFields as $idField) {
                // $entity[$idField] = null;
                //}
            }
            else {
                $entity = new $entityClass();

                $entity['parent'] = $this->retrieveRelatedObjects('ticket', 'parent', false);
                $entity['rating'] = $this->retrieveRelatedObjects('rating', 'rating', true);
                $entity['children'] = $this->retrieveRelatedObjects('ticket', 'children', true);
            }
        }

        $entityData = $entity->toArray();

        // assign data to template as array for easy translatable support
        $this->view->assign('ticket', $entityData)
                   // assign also the actual object for categories listener
                   ->assign('ticketObj', $entity)
                   ->assign('mode', $this->mode)
                   ->assign('inlineUsage', $this->inlineUsage);

        // save entity reference for reuse in handleCommand method
        $this->ticketRef = $entity;

        // load and assign registered categories
        $categories = CategoryRegistryUtil::getRegisteredModuleCategories('MUTicket', 'Ticket', 'id');
        $this->view->assign('registries', $categories);

        $this->initializeAdditions();

        // everything okay, no initialization errors occured
        return true;
    } 
}
