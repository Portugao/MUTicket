<?php
/**
 * MUTicket.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUTicket
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.2 (http://modulestudio.de) at Sun Sep 11 16:08:57 CEST 2011.
 */

/**
 * This handler class handles the page events of the Form called by the MUTicket_user_edit() function.
 * It aims on the supporter object type.
 *
 * Member variables in a form handler object are persisted accross different page requests. This means
 * a member variable $this->X can be set on one request and on the next request it will still contain
 * the same value.
 *
 * A form handler will be notified of various events that happens during it's life-cycle.
 * When a specific event occurs then the corresponding event handler (class method) will be executed. Handlers
 * are named exactly like their events - this is how the framework knows which methods to call.
 *
 * The list of events is:
 *
 * - <b>initialize</b>: this event fires before any of the events for the plugins and can be used to setup
 *   the form handler. The event handler typically takes care of reading URL variables, access control
 *   and reading of data from the database.
 *
 * - <b>handleCommand</b>: this event is fired by various plugins on the page. Typically it is done by the
 *   Zikula_Form_Plugin_Button plugin to signal that the user activated a button.
 */
class MUTicket_Form_Handler_Base_User_Supporter_Edit extends Zikula_Form_AbstractHandler
{
    /**
     * Persistent member vars
     */

    /**
     * @var string Name of treated object type.
     */
    protected $objectType;

    /**
     * @var MUTicket_Entity_Supporter Reference to treated supporter instance.
     */
    protected $supporterRef = false;

    /**
     * @var array List of identifiers of treated supporter.
     */
    protected $idValues = array();

    /**
     * @var string One of "create" or "edit".
     */
    protected $mode;

    /**
     * @var string Code defining the redirect goal after command handling.
     */
    protected $returnTo = null;

    /**
     * @var string Url of current form with all parameters for multiple creations.
     */
    protected $repeatReturnUrl = null;

    /**
     * @var string Whether this form is being used inline within a window.
     */
    protected $inlineUsage = false;

    /**
     * @var string Full prefix for related items.
     */
    protected $idPrefix = '';

    /**
     * Post construction hook.
     *
     * @return mixed
     */
    public function setup()
    {
    }

    /**
     * Initialize form handler.
     *
     * This method takes care of all necessary initialisation of our data and form states.
     *
     * @return boolean False in case of initialization errors, otherwise true.
     */
    public function initialize(Zikula_Form_View $view)
    {
        $this->inlineUsage = ((UserUtil::getTheme() == 'Printer') ? true : false);
        $this->idPrefix = $this->request->getGet()->filter('idp', '', FILTER_SANITIZE_STRING);

        // initialise redirect goal
        $this->returnTo = $this->request->getGet()->filter('returnTo', null, FILTER_SANITIZE_STRING);
        // store current uri for repeated creations
        $this->repeatReturnUrl = System::getCurrentURI();

        $this->objectType = 'supporter';

        $entityClass = 'MUTicket_Entity_' . ucfirst($this->objectType);
        $repository = $this->entityManager->getRepository($entityClass);

        $objectTemp = new $entityClass();
        $idFields = $objectTemp->get_idFields();

        // retrieve identifier of the object we wish to view
        $this->idValues = MUTicket_Util_Controller::retrieveIdentifier($this->request, array(), $this->objectType, $idFields);
        $hasIdentifier = MUTicket_Util_Controller::isValidIdentifier($this->idValues);

        $entity = null;
        $this->mode = ($hasIdentifier) ? 'edit' : 'create';

        if ($this->mode == 'edit') {
            if (!SecurityUtil::checkPermission('MUTicket:Supporter:', '::', ACCESS_EDIT)) {
                // set an error message and return false
                return $this->view->setErrorMsg(LogUtil::registerPermissionError());
            }

        $entity = $repository->selectById($this->idValues);
        if (!is_object($entity) || !isset($entity[$idFields[0]])) {
            return $this->view->setErrorMsg($this->__('No such item.'));
        }

            // try to guarantee that only one person at a time can be editing this supporter
            $itemID = '';
            foreach ($idFields as $idField) {
                if (!empty($itemID)) {
                    $itemID .= '_';
                }
                $itemID .= $this->idValues[$idField];
            }
            $returnUrl = ModUtil::url('MUTicket', 'user', 'display', array('ot' => 'supporter', 'id' => $this->idValues['id']));
            ModUtil::apiFunc('PageLock', 'user', 'pageLock',
                                 array('lockName' => 'MUTicketSupporter' . $itemID,
                                       'returnUrl' => $returnUrl));
        }
        else {
            if (!SecurityUtil::checkPermission('MUTicket:Supporter:', '::', ACCESS_ADD)) {
                return $this->view->setErrorMsg(LogUtil::registerPermissionError());
            }

            $hasTemplateId = false;
            $templateId = $this->request->getGet()->get('astemplate', '');
            if (!empty($templateId)) {
                $templateIdValueParts = explode('_', $templateId);
                $hasTemplateId = (count($templateIdValueParts) == count($idFields));
            }
            if ($hasTemplateId === true) {
                $templateIdValues = array();
                $i = 0;
                foreach ($idFields as $idField) {
                    $templateIdValues[$idField] = $templateIdValueParts[$i];
                    $i++;
                }
                // reuse existing supporter
        $entity = $repository->selectById($templateIdValues);
        if (!is_object($entity) || !isset($entity[$idFields[0]])) {
            return $this->view->setErrorMsg($this->__('No such item.'));
        }
                //foreach ($idFields as $idField) {
                //     $entity[$idField] = null;
                //}
            }
            else {
                $entity = new $entityClass();

            }
        }

        $entityData = $entity->toArray();

        // assign data to template as array for easy translatable support
        $this->view->assign('supporter', $entityData)
                   ->assign('mode', $this->mode)
                   ->assign('inlineUsage', $this->inlineUsage);

        // save entity reference for reuse in handleCommand method
        $this->supporterRef = $entity;

        $this->initializeAdditions();

        // everything okay, no initialization errors occured
        return true;
    }

    /**
     * Method stub for own additions in subclasses.
     */
    protected function initializeAdditions()
    {
    }

    /**
     * Pre-initialise hook.
     *
     * @return void
     */
    public function preInitialize()
    {
    }

    /**
     * Post-initialise hook.
     *
     * @return void
     */
    public function postInitialize()
    {
    }

    /**
     * Get list of allowed redirect codes.
     */
    protected function getRedirectCodes()
    {
        $codes = array();
        // main page of admin area
        $codes[] = 'admin';
        // admin list of supporters
        $codes[] = 'adminView';
        // admin display page of treated supporter
        $codes[] = 'adminDisplay';
        // main page of user area
        $codes[] = 'user';
        // user list of supporters
        $codes[] = 'userView';
        // user display page of treated supporter
        $codes[] = 'userDisplay';
        // main page of ajax area
        $codes[] = 'ajax';
        // main page of account area
        $codes[] = 'account';
        return $codes;
    }

    /**
     * Get the default redirect url. Required if no returnTo parameter has been supplied.
     * This method is called in handleCommand so we know which command has been performed.
     */
    protected function getDefaultReturnUrl($args, $obj)
    {
        // redirect to the list of supporters
        $viewArgs = array('ot' => $this->objectType);
        $url = ModUtil::url('MUTicket', 'user', 'view', $viewArgs);

        if ($args['commandName'] != 'delete') {
            // redirect to the detail page of treated supporter
            $url = ModUtil::url('MUTicket', 'user', 'display', array('ot' => 'supporter', 'id' => $this->idValues['id']));
        }
        return $url;
    }

    /**
     * Command event handler.
     *
     * This event handler is called when a command is issued by the user. Commands are typically something
     * that originates from a {@link Zikula_Form_Plugin_Button} plugin. The passed args contains different properties
     * depending on the command source, but you should at least find a <var>$args['commandName']</var>
     * value indicating the name of the command. The command name is normally specified by the plugin
     * that initiated the command.
     * @see Zikula_Form_Plugin_Button
     * @see Zikula_Form_Plugin_ImageButton
     */
    public function handleCommand(Zikula_Form_View $view, &$args)
    {
        if ($args['commandName'] == 'delete') {
            if (!SecurityUtil::checkPermission('MUTicket:Supporter:', '::', ACCESS_DELETE)) {
                return $this->view->setErrorMsg(LogUtil::registerPermissionError());
            }
        }

        $selectedRelations = array();
        $this->view->assign('selectedRelations', $selectedRelations);

        if (!in_array($args['commandName'], array('delete', 'cancel'))) {
            // do forms validation including checking all validators on the page to validate their input
            if (!$this->view->isValid()) {
                return false;
            }
        }

        $this->objectType = 'supporter';

        $entityClass = 'MUTicket_Entity_' . ucfirst($this->objectType);
        $repository = $this->entityManager->getRepository($entityClass);

        // get treated entity reference from persisted member var
        $supporter = $this->supporterRef;

        // fetch posted data input values as an associative array
        $formData = $this->view->getValues();
        // we want the array with our field values
        $supporterData = $formData['supporter'];
        unset($formData['supporter']);


        $repeatCreateAction = false;
        if ($args['commandName'] == 'create' && isset($supporterData['repeatcreation'])) {
            $repeatCreateAction = $supporterData['repeatcreation'];
            unset($supporterData['repeatcreation']);
        }

        // assign fetched data
        $supporter->merge($supporterData);

        if (in_array($args['commandName'], array('create', 'update'))) {
            // event handling if user clicks on create or update

            // Let any hooks perform additional validation actions
            $hook = new Zikula_ValidationHook('muticket.ui_hooks.supporters.validate_edit', new Zikula_Hook_ValidationProviders());
            $validators = $this->notifyHooks($hook)->getValidators();
            // TODO validation incomplete (#36)

            // save supporter
            $successMessage = '';
            $this->updateRelationLinks($supporter);
            //$this->entityManager->transactional(function($entityManager) {
                $this->entityManager->persist($supporter);
                $this->entityManager->flush();
            //});

            if ($args['commandName'] == 'create') {
                $successMessage = $this->__('Done! Supporter created.');
            } else if ($args['commandName'] == 'update') {
                $successMessage = $this->__('Done! Supporter updated.');
            }

            if ($args['commandName'] == 'create') {
                // store new identifier
                $this->idValues['id'] = $supporter->getId();
                // check if the insert has worked, might become obsolete due to exception usage
                if (!$this->idValues['id']) {
                    return $this->view->setErrorMsg($this->__('Error! Creation attempt failed.'));
                }
            } else if ($args['commandName'] == 'update') {
            }

            LogUtil::registerStatus($successMessage);

            // Let any hooks know that we have created or updated an item
            $url = new Zikula_ModUrl('MUTicket', 'user', 'display', ZLanguage::getLanguageCode(), array('ot' => $this->objectType, 'id' => $this->idValues['id']));
            $hook = new Zikula_ProcessHook('muticket.ui_hooks.supporters.process_edit', $this->id, $url);
            $this->notifyHooks($hook);
        } else if ($args['commandName'] == 'delete') {
            // event handling if user clicks on delete

            // Let any hooks perform additional validation actions
            $hook = new Zikula_ValidationHook('muticket.ui_hooks.supporters.validate_delete', new Zikula_Hook_ValidationProviders());
            $validators = $this->notifyHooks($hook)->getValidators();
            // TODO validation incomplete (#36)

            // delete supporter
            $this->entityManager->remove($supporter);
            $this->entityManager->flush();


            LogUtil::registerStatus($this->__('Done! Supporter deleted.'));

            // Let any hooks know that we have deleted an item
            $hook = new Zikula_ProcessHook('muticket.ui_hooks.supporters.process_delete', $this->id);
            $this->notifyHooks($hook);
        } else if ($args['commandName'] == 'cancel') {
            // event handling if user clicks on cancel
        }

        if ($args['commandName'] != 'cancel') {
            // clear view cache to reflect our changes
            $this->view->clear_cache();
        }

        if ($this->mode == 'edit') {
            ModUtil::apiFunc('PageLock', 'user', 'releaseLock',
                             array('lockName' => 'MUTicketSupporter' . $this->id));
        }
        return $this->view->redirect($this->getRedirectUrl($args, $supporter, $repeatCreateAction));

        // We should in principle not end here at all, since the above command handlers should
        // match all possible commands, but we return "ok" (true) for all cases.
        // You could also return $this->view->setErrorMsg('Unexpected command')
        return true;
    }

    /**
     * Get url to redirect to.
     */
    protected function getRedirectUrl($args, $obj, $repeatCreateAction = false)
    {
        if ($this->inlineUsage == true) {
            // inline usage, return to special function for closing the Zikula.UI.Window instance
            return ModUtil::url('MUTicket', 'user', 'handleInlineRedirect',
                                                                 array('idp' => $this->idPrefix,
                                                                       'id' => $this->idValues['id'],
                                                                       'com' => $args['commandName']));
        }

        if ($repeatCreateAction) {
            return $this->repeatReturnUrl;
        }

        // normal usage, compute return url from given redirect code
        if (!in_array($this->returnTo, $this->getRedirectCodes())) {
            // invalid return code, so return the default url
            return $this->getDefaultReturnUrl($args, $obj);
        }

        // parse given redirect code and return corresponding url
        switch ($this->returnTo) {
            case 'admin':
                                    return ModUtil::url('MUTicket', 'admin');
            case 'adminView':
                                    return ModUtil::url('MUTicket', 'admin', 'view',
                                                             array('ot' => $this->objectType));
            case 'adminDisplay':
                                    if ($args['commandName'] != 'delete') {
                                        return ModUtil::url('MUTicket', 'admin', 'display', array('ot' => 'supporter', 'id' => $this->idValues['id']));
                                    }
                                    return $this->getDefaultReturnUrl($args, $obj);
            case 'user':
                                    return ModUtil::url('MUTicket', 'user');
            case 'userView':
                                    return ModUtil::url('MUTicket', 'user', 'view',
                                                             array('ot' => $this->objectType));
            case 'userDisplay':
                                    if ($args['commandName'] != 'delete') {
                                        return ModUtil::url('MUTicket', 'user', 'display', array('ot' => 'supporter', 'id' => $this->idValues['id']));
                                    }
                                    return $this->getDefaultReturnUrl($args, $obj);
            case 'account':
                                    return ModUtil::url('MUTicket', 'account');
            default:
                                    return $this->getDefaultReturnUrl($args, $obj);
        }
    }

    /**
     * Select a related object in create mode.
     *
     * @return array Single result or list of results.
     */
    protected function retrieveRelatedObjects($objectType, $relationInputFieldName, $many = false, $source = 'GET')
    {
        $entityClass = 'MUTicket_Entity_' . ucfirst($objectType);
        $repository = $this->entityManager->getRepository($entityClass);

        $objectTemp = new $entityClass(); 
        $idFields = $objectTemp->get_idFields();

        $where = '';
        $sortParam = $repository->getDefaultSortingField() . ' asc';

        $inputValue = '';
        if ($source == 'POST') {
            $inputValue = $this->request->getPost()->get($relationInputFieldName, '');
        }
        else {
            $inputValue = $this->request->getGet()->get($relationInputFieldName, '');
        }
        if (empty($inputValue)) {
            return $many ? array() : null;
        }

        $inputValueParts = explode('_', $inputValue);
        $i = 0;
        foreach ($idFields as $idField) {
            if (!empty($where)) {
                $where .= ' AND ';
            }

            if ($many) {
                $where .= 'tbl.' . $idField . ' IN (' . DataUtil::formatForStore($inputValueParts[$i]) . ')';
            } else {
                $where .= 'tbl.' . $idField . ' = \'' . DataUtil::formatForStore($inputValueParts[$i]) . '\'';
            }
            $i++;
        }
        list($result, $resultCount) = $repository->selectWherePaginated($where, $sortParam, 1, 50);
        return (($many) ? $result : $result[0]);
    }

    /**
     * Helper method for updating links to related records.
     */
    protected function updateRelationLinks($entity)
    {
    }
}
