<?php
/**
 * MUTicket.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUTicket
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.3 (http://modulestudio.de) at Tue Oct 11 10:27:49 CEST 2011.
 */

/**
 * Utility implementation class for view helper methods.
 * 
 */
class MUTicket_Util_View extends MUTicket_Util_Base_View
{
	/**
	 * 
	 * This method is for getting an array of userids of users that are
	 * in the supporter group
	 * 
	 * @return array
	 */
    public static function getSupporterIds() {
    	
    	ModUtil::dbInfoLoad('Groups');
    	$tables = DBUtil::getTables();
    	$groups_column = $tables['groups_column'];
    	
    	// get supporter group
    	
    	$supportergroup = ModUtil::getVar('MUTicket', 'supportergroup');
    	
    	$where = "WHERE $groups_column[name] = '" . DataUtil::formatForStore($supportergroup) . "'";
    	
    	// get supporter group id
    	
    	$supportergroupid = UserUtil::getGroupIdList($where);
    	
    	// get user id's of users, which are in the supporter group   	
    	
    	$supporterusersids = UserUtil::getUsersForGroup($supportergroupid);
    	
    	$userids = implode(',' , $supporterusersids);
    	
    	return $userids; 	
    
    }
    
    /**
     * 
     * This method is for getting an array of supporter email addresses for
     * supporters that are active
     * 
     * @ return array
     */
    public static function getSupporterMails() {
    	
    	$repository = MUTicket_Util_View::getSupporterRepository();
    	
    	$where = 'tbl.state = 1';
    	$supporters = $repository->selectWhere();
    	
    	$supporternames = array();
    	
    	foreach ($supporters as $supporter) {
    		$supporternames[] = $supporter['username'];
    	}
    	
    	$supporteruids = array();
    	
    	foreach ($supporternames as $supportername) {
    		$supporteruids[] = UserUtil::getIdFromName($supportername);
    	}
    	$supportermailadresses = array();
    	
    	foreach ($supporteruids as $supporteruid) {
    	$supportermailadresses[] = UserUtil::getVar('email', $supporteruid);
        }
        
        return $supportermailadresses;
    }
    
    /**
     * 
     * This method is for getting an array of supporter uids
     * 
     * @ return array
     */
    public static function getExistingSupporterUids() {
    	
    	$repository = MUTicket_Util_View::getSupporterRepository();
    	
    	$supporters = $repository->selectWhere();
    	
    	$supporternames = array();
    	
    	foreach ($supporters as $supporter) {
    		$supporterids[] = $supporter['username'];
    	}
    	
    	$supporteruids = array();
    	
    	foreach ($supporternames as $supportername) {
    		$supporteruids[] = UserUtil::getIdFromName($supportername);
    	}
        
        return $supporteruids;
    }
    
    /**
     * 
     * This method is for getting a repository for supporters
     * 
     */
    
    public static function getSupporterRepository() {
    	
    	$serviceManager = ServiceUtil::getManager();
        $entityManager = $serviceManager->getService('doctrine.entitymanager');
    	$repository = $entityManager->getRepository('MUTicket_Entity_Supporter');
    	
    	return $repository;
    }
    
    public static function ratingAllowed() {
    	
    	$uid = UserUtil::getVar('uid');
    	
    	// get supporteruids 	
    	$supporteruids = MUTicket_Util_View::getExistingSupporterUids();
    	
    	if (in_array($uid, $supporteruids)) {
    		$ratingallowed = 0;
    	}
    	else {
    		$ratingallowed = 1;
    	}
    	
    	$this->view->assign('ratingsallowed',$ratingallowed );
    }
}
